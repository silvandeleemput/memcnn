version: 2.1
aliases:
  - &container_python
    docker:
      - image: cimg/python:3.8.4  # primary container for the build job

  - &run_task_install_tox_dependencies
    run:
      name: install tox dependencies
      command: |
        sudo apt-get update
        sudo apt install -y build-essential libssl-dev libpython-dev python python-pip
        sudo -H pip install --upgrade pip tox virtualenv

orbs:
  codecov: codecov/codecov@1.0.4
jobs:
  testing:
    parameters:
      tests:
        type: string
        default: py38-torch10,py38-torch11,py38-torch14,py38-torch17,py38-torchlatest
    <<: *container_python
    steps:
      - checkout
      - *run_task_install_tox_dependencies
      - run:
          name: execute pytests << parameters.tests >>
          no_output_timeout: 30m
          command: |
            mkdir test-reports
            tox -e << parameters.tests >>
      - codecov/upload:
          flags: backend,unittest
      - store_artifacts:
          path: htmlcov
      - store_test_results:
          path: test-reports
      - codecov/upload:
          file: coverage/*.json
          flags: frontend
  builddocs:
    <<: *container_python
    steps:
      - checkout
      - *run_task_install_tox_dependencies
      - run:
          name: build the sphinx documentation
          command: |
            tox -e docs
  conda_deploy:
    parameters:
      versions:
        type: string
        default: "3.7 3.8"
    docker:
      - image: continuumio/miniconda3
    steps:
      - checkout
      - run:
          name: install conda dependencies
          command: |
            conda install conda-build anaconda-client conda-verify -y
      - run:
          name: generate skeleton file from PyPI and complete recipe
          command: |
            cd ~
            conda skeleton pypi memcnn
            cd memcnn
            python -c "f = open('meta.yaml', 'r'); data = f.read(); f.close(); data=data.replace(' torch ', ' pytorch ').replace('your-github-id-here', 'silvandeleemput').replace('pillow\n    - python', 'pillow\n    - pip\n    - python').replace(' pip', ' pip >=18.0'); f = open('meta.yaml', 'w'); f.write(data); f.close();"
            cat ~/memcnn/meta.yaml
      - run:
          name: build binary artifacts for python versions << parameters.versions >>
          no_output_timeout: 30m
          command: |
            cd ~/memcnn
            PYTHON_VERSIONS=( << parameters.versions >> )
            for i in "${PYTHON_VERSIONS[@]}"
            do
                echo $i
                conda-build -c conda-forge -c simpleitk -c pytorch --numpy 1.15.1 --python $i .
            done
      - run:
          name: upload binary artifacts for all platforms to anaconda cloud
          command: |
            anaconda login --user=silvandeleemput --password=$CONDA_PASSWORD
            find /opt/conda/conda-bld/ -name *.tar.bz2 | while read file
            do
                echo $file
                anaconda upload $file --skip-existing --all
            done
  deploy:
    docker:
      - image: cimg/python:3.8.4
    steps:
      - checkout
      - restore_cache:
          key: v1-dependency-cache-{{ checksum "setup.py" }}
      - run:
          name: install python dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install --upgrade pip
            pip install pylint doc8 coverage codecov twine
            pip install -e .
      - save_cache:
          key: v1-dependency-cache-{{ checksum "setup.py" }}
          paths:
            - "venv"
      - run:
          name: verify git tag vs. version
          command: |
            python3 -m venv venv
            . venv/bin/activate
            python setup.py verify
      - run:
          name: init .pypirc
          command: |
            echo -e "[pypi]" >> ~/.pypirc
            echo -e "username = Sil" >> ~/.pypirc
            echo -e "password = $PYPI_PASSWORD" >> ~/.pypirc
      - run:
          name: createpackages
          command: |
            python setup.py sdist
            python setup.py bdist_wheel
      - run:
          name: upload to pypi
          command: |
            . venv/bin/activate
            twine upload dist/*
      - run:
          name: trigger docker hub master branch build
          command: |
            curl -H "Content-Type: application/json" --data '{"source_type": "Branch", "source_name": "master"}' -X POST $DOCKER_TRIGGER_URL
      - run:
          name: trigger docker hub latest tag build
          command: |
            curl -H "Content-Type: application/json" --data '{"source_type": "Tag", "source_name": "'"$CIRCLE_TAG"'"}' -X POST $DOCKER_TRIGGER_URL

workflows:
  version: 2
  build_test_and_deploy:
    jobs:
      - testing:
          name: testing_py38_torch10
          tests: py38-torch10
          filters:
            tags:
              only: /.*/
      - testing:
          name: testing_py38_torch11
          tests: py38-torch11
          filters:
            tags:
              only: /.*/
      - testing:
          name: testing_py38_torch14
          tests: py38-torch14
          filters:
            tags:
              only: /.*/
      - testing:
          name: testing_py38_torch17
          tests: py38-torch17
          filters:
            tags:
              only: /.*/
      - testing:
          name: testing_py38_torchlatest
          tests: py38-torchlatest
          filters:
            tags:
              only: /.*/
      - deploy:
          requires:
            - testing_py38_torch10
            - testing_py38_torch11
            - testing_py38_torch14
            - testing_py38_torch17
            - testing_py38_torchlatest
          filters:
            tags:
              only: /[0-9]+(\.[0-9]+)*/
            branches:
              ignore: /.*/
      - conda_deploy:
          name: conda_deploy_py37
          requires:
            - deploy
          versions: "3.7"
          filters:
            tags:
              only: /[0-9]+(\.[0-9]+)*/
            branches:
              ignore: /.*/
      - conda_deploy:
          name: conda_deploy_py38
          requires:
            - deploy
          versions: "3.8"
          filters:
            tags:
              only: /[0-9]+(\.[0-9]+)*/
            branches:
              ignore: /.*/
